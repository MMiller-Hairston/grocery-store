function t(){return t=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},t.apply(this,arguments)}module.exports=function(){let e={};function r(r,n){const o=t({},e,{[r]:n});e=o}return{getStore:function(){return e},createCart:function(n,o="id",i=[]){if(!n)throw new Error("Name is required for cart to be a part of the store");if(n in e)throw new Error("Name should be unique");let u=i;return r(n,u),{getCart:function(){return u},updateItem:function(e,i){const a=u.findIndex(t=>t[o]===e);if(-1===a)throw new Error("An element with that identifier was not found");const f=u.map((e,r)=>r!==a?e:t({},e,i));return u=f,r(n,f),f},addItem:function(t){if(-1!==u.findIndex(e=>t[o]===e[o]))throw new Error("An element with that identifier is already in the cart, you should update it instead");let e=[...u,t];return u=e,r(n,e),e},removeItem:function(t){const e=u.findIndex(e=>e[o]===t);if(-1===e)throw new Error("An element with that identifier was not found");let i=u.slice();return i.splice(e,1),u=i,r(n,i),i},clearCart:function(){u=i,r(n,i)}}},createItem:function(n,o={}){if(!n)throw new Error("Name is required for cart to be a part of the store");if(n in e)throw new Error("Name should be unique");let i=o;return r(n,i),{getItem:function(){return i},updateItem:function(e){const o=t({},i,e);return i=o,r(n,o),o},clearItem:function(){return i=o,r(n,o),i}}}}};
//# sourceMappingURL=grocery-store.modern.js.map
